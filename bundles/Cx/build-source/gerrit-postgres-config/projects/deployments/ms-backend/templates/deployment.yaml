#
#   Copyright 2019 Ericsson AB.
#   For a full list of individual contributors, please see the commit history.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##-------------------------------------------------------------------------------------
## myapplication Generic Deployment 
##
## Maintainer: michael.frick@ericsson.com
##
##--------------------------------------------------------------------------------------
{{- if .Values.argorollouts }}
apiVersion: argoproj.io/v1alpha1 # Changed from apps/v1
kind: Rollout # Changed from Deployment
# ----- Everything below this comment is the same as a deployment -----
{{- else }}
apiVersion: apps/v1
kind: Deployment
{{- end }}
metadata:
  name: {{ include "myapplication.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "myapplication.name" . }}
    helm.sh/chart: {{ include "myapplication.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.argorollouts }}
  minReadySeconds: 30
  revisionHistoryLimit: 3
  strategy:
  # ----- Everything above this comment are the same as a deployment -----
      canary: # A new field that used to provide configurable options for a Canary strategy
        steps:
        - setWeight: 20
        - pause: {}
  {{- end }} 
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "myapplication.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "myapplication.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets: 
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ template "myapplication.fullname" . }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}            
      terminationGracePeriodSeconds: 10
      restartPolicy: Always
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.resources}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          ports:
          - name: {{ .Values.myapplication.containerPortName }}
            containerPort: {{ .Values.myapplication.containerPort }}
            protocol: TCP
          volumeMounts:
            - name: config-volume
              mountPath: {{ .Values.myapplication.ConfigMapvolumeMountPath }}  
            {{- if .Values.myapplication.DatavolumeMountPath }}  
            - name: data
              mountPath: {{ .Values.myapplication.DatavolumeMountPath }} 
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
                path: {{ .Values.livenessProbe.path }}
                port: {{ .Values.livenessProbe.port }}
                scheme: {{ .Values.livenessProbe.scheme }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
                path: {{ .Values.readinessProbe.path }}
                port: {{ .Values.readinessProbe.port }}
                scheme: {{ .Values.readinessProbe.scheme }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}      
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: myapplication_USE_LONGNAME
              value: "true"
            - name: myapplication_NODENAME
              value: "myapplication@$(MY_POD_IP)"
            - name: K8S_SERVICE_NAME
              value: "{{ template "myapplication.fullname" . }}"
            {{- if .Values.myapplication.password }}
            - name: myapplication_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "myapplication.fullname" . }}
                  key: myapplication-password       
            {{- end }}                    
          envFrom:
            - configMapRef:
                name: {{ template "myapplication.fullname" . }}-config-env-vars
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "myapplication.fullname" . }}-config-appl-properties  
  {{- if .Values.myapplication.DatavolumeMountPath }}
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
        - name: data
          persistentVolumeClaim:
            claimName: myapp-vol
  {{- end }}
  {{- end }}